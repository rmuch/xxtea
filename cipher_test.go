package xxtea

import "testing"

var keySizeTestVectors = [][]byte{
	{},
	{0xe4, 0x82},
	{0xde, 0xdf, 0x3c, 0xff},
	{0x41, 0x96, 0x3b, 0x89, 0x55, 0xab},
	{0x9a, 0xe8, 0x2, 0xb7, 0x7a, 0x10, 0xbd, 0xe5},
	{0xda, 0xfd, 0xe1, 0xa2, 0xa7, 0x8c, 0x87, 0x3e, 0xdb, 0x51},
	{0x75, 0x20, 0xd5, 0x5d, 0xa6, 0xfd, 0x97, 0x47, 0xbd, 0x3f, 0xd1, 0xb5},
	{0x2d, 0xbb, 0xc8, 0xed, 0xcb, 0xe6, 0x6, 0xa4, 0xa, 0xe3, 0x54, 0x15, 0x73, 0x97},
	{0xd6, 0xb9, 0xd2, 0x6e, 0x4f, 0x90, 0x67, 0x43, 0x65, 0x8a, 0xa3, 0x98, 0xef, 0x26, 0x59, 0x70},
	{0xac, 0xb7, 0xf9, 0x42, 0x47, 0x45, 0xb5, 0xdc, 0x7b, 0x39, 0x30, 0x1f, 0x91, 0xeb, 0x3, 0xbd, 0x6e, 0xe5},
	{0xe4, 0xf2, 0x91, 0x39, 0x27, 0x3, 0x65, 0x14, 0x88, 0xad, 0xe8, 0x34, 0xd7, 0x74, 0xc6, 0xfa, 0xdc, 0xde, 0xb9, 0xdd},
	{0x97, 0x45, 0x1e, 0x50, 0x57, 0x24, 0xc8, 0x5f, 0xc0, 0xdc, 0x4c, 0x66, 0xd4, 0x65, 0x7e, 0xfa, 0x89, 0x31, 0xb7, 0xe4, 0x1, 0xac},
}

func TestKeySizeValidation(t *testing.T) {
	for _, v := range keySizeTestVectors {
		_, err := NewCipher(v, 64)
		if err != nil && len(v) == 16 {
			t.Errorf("NewCipher() rejected valid key of length %d", len(v))
		} else if err == nil && len(v) != 16 {
			t.Errorf("NewCipher() accepted invalid key of length %d", len(v))
		} else if err == nil && len(v) == 16 {
			t.Logf("NewCipher() accepted valid key of length %d", len(v))
		} else if err != nil {
			t.Logf("NewCipher() rejected invalid key of length %d", len(v))
		}
	}
}

func TestBlockSizeValidation(t *testing.T) {
	key := []byte{0xd6, 0xb9, 0xd2, 0x6e, 0x4f, 0x90, 0x67, 0x43, 0x65, 0x8a, 0xa3, 0x98, 0xef, 0x26, 0x59, 0x70}

	validBlockSizes := []int{8, 12, 16, 20, 24, 28, 32, 36, 40}
	invalidBlockSizes := []int{4, 9, 13, 15, 17, 21, 27, 31, 37}

	for _, bs := range validBlockSizes {
		_, err := NewCipher(key, bs)
		if err != nil {
			t.Errorf("NewCipher() with valid block size %d failed", bs)
		}
	}

	for _, bs := range invalidBlockSizes {
		_, err := NewCipher(key, bs)
		if err == nil {
			t.Errorf("NewCipher() with invalid block size %d succeeded", bs)
		}
	}
}
